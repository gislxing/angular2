####英雄编辑器
    1、创建一个名为angular-tour-of-heroes的新项目
    2、编译并启动项目
        ng bulid
        ng serve
    3、显示我们的英雄
        1、打开文件src/app/app.component.ts并在AppComponent中添加两个属性：title属性表示应用的名字，hero属性表示一个名叫 “Windstorm” 的英雄:
            export class AppComponent {
                title = 'Tour of Heroes';
                hero = 'Windstorm';
            }
        2、修改@Component装饰器中指定的模板，打开templateUrl所指的html文件，为这些新属性建立数据绑定：
                <h1>{{title}}</h1>
                <h2>{{hero}} details</h2>
            这里的双大括号会告诉应用：从组件中读取title和hero属性，并且渲染它们。 这就是单向数据绑定的“插值表达式”形式
    4、Hero 对象
        1、创建一个Hero类，它具有id和name属性。 现在，把下列代码放在app.component.ts的顶部，仅次于 import 语句：
            export class Hero {
                id: number;
                name: string;
            }
        2、把组件hero属性的类型换成Hero，如下所示：
            export class AppComponent {
                title = 'Tour of Heroes';
                hero: Hero = {
                    id: 1,
                    name: '凤小龙'
                };
            }
            更新模板中的绑定表达式，来引用hero的name属性：
                {{hero.name}}
        3、添加更多的 HTML
            添加一个<div>来显示英雄的id属性，用另一个<div>来显示英雄的name属性：
                <div><label>ID: </label>{{hero.id}}</div>
                <div><label>name: </label>{{hero.name}}</div>
        4、编辑我们的英雄
            把英雄的名字从单纯的<label>重构成<label>和<input>元素的组合，如下所示：
                <div>
                    <label>name: </label>
                    <input value="{{hero.name}}" placeholder="name">
                </div>
        5、双向绑定
            把模板中的英雄名字重构成为下面的样子：
                <input [(ngModel)]="hero.name" placeholder="name">
            [(ngModel)]是一个Angular语法，用与把hero.name绑定到输入框中。 
            它的数据流是双向的：从属性到输入框，并且从输入框回到属性。
            NgModel属于FormsModule模块
            要使用该模块需要引入此模块，在app.module.ts文件中添加如下代码以便引入该模块：
                import { FormsModule }   from '@angular/forms';
            然后把FormsModule添加到@NgModule元数据的imports数组中：
                @NgModule({
                    imports: [
                        BrowserModule,
                        FormsModule // <-- import the FormsModule before binding with [(ngModel)]
                    ],
                    declarations: [
                        AppComponent
                    ],
                    bootstrap: [ AppComponent ]
                })
        6、显示我们的英雄列表
            先创建一个由十位英雄组成的数组：
                const HEROES: Hero[] = [
                    {id: 1, name: '张1'},
                    {id: 2, name: '李2'},
                    {id: 3, name: '王3'},
                    {id: 4, name: '赵4'},
                    {id: 5, name: '郭5'},
                    {id: 6, name: '龚6'},
                    {id: 7, name: '猪7'},
                    {id: 8, name: '李8'},
                    {id: 9, name: '李9'},
                    {id: 10, name: '李10'}
                ]
            暴露英雄
                